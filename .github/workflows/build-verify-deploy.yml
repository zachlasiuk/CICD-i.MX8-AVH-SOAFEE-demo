name: Build_Verify_Deploy_x2
run-name: CI/CD pipeline ðŸš€
on:
  push:
  workflow_dispatch:
jobs:
  build:
    runs-on: [self-hosted, build-and-verify]
    steps:
     - uses: actions/checkout@v2

     - name: Build - Arm runners in GitHub coming next year!
       run: |
        echo "Buildin source images and containers..."
        echo "...no code changes to build, in order to speed up the demo."
         
  verify:
    needs: build
    runs-on: [self-hosted, build-and-verify]
    steps:
      - uses: actions/checkout@v2

      - name: Install Docker
        run: |
          echo "pre-installed on runner. Proceed to next step"
        
      - name: Obtain Docker images
        run: |
          sudo docker pull public.ecr.aws/g1v9u7e2/github-universe-demo:video_capture_container
          sudo docker pull public.ecr.aws/g1v9u7e2/github-universe-demo:application_container
          sudo docker pull public.ecr.aws/g1v9u7e2/github-universe-demo:inference_container
        

      - name: Unit test (1) docker images exist
        run: |
          sudo docker images

      #- name: Unit test (2) video container opens and encodes .mp4 correctly
      #  run: |
      #    sudo docker run -d --name video_stream --network=host public.ecr.aws/g1v9u7e2/github-universe-demo:video_capture_container ./rtsp-simple-server mp4.yml
      #    sleep 5  # allow some time for the container to start and the script to run
      #    timeout 10 sudo docker logs video_stream > video_output.txt
      #    grep -q "publishing to path 'cam', with UDP, 2 tracks (H264, MPEG4Audio)" video_output.txt 
      #    sudo docker stop video_stream

      - name: Unit test (3) inference container takes in video stream correctly
        run: |
          ls        
             
      - name: Unit test (4) application container runs headless without error
        run: |
          ls   

      - name: System test all containers working together correctly
        run: |
          ls

  deploy-virtual:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to virtual board, Arm Virtual Hardware
        run: |
          echo "deploying to virtual AVH representation of i.MX board..."
          ls

      - name: Set up ssh
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIV_KEY }}" > ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_PUB_KEY }}" > ~/.ssh/id_ed25519.pub
          chmod 600 ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519.pub



      - name: Verify info
        run: |
          ls ~/.ssh/
          cat ~/.ssh/known_hosts
          cat ~/.ssh/id_ed25519.pub
        

      - name: Test ssh connection
        run: |
          ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -J  ae53f196-f856-4fe8-b365-b604c5af7540@proxy.app.avh.arm.com root@10.11.0.6
          ls 
          cat /etc/os-release
      
      - name: Jumphost
        run: |
          ssh -v -J ${{ secrets.JUMP_HOST }} ${{ secrets.AVH_USER_IP }}
          ls 
          cat /etc/os-release
    
          

  deploy-physical:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to physical board, i.MX8M Plus
        run: |
          echo "deploying to i.MX..."
          ls